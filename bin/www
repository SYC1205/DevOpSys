#!/usr/bin/env node

/**
 * Module dependencies.
 */
config = require("nconf");
config.env().file({ "file":"config.json" });

//ZK Client child process
var env = process.env,
	bossEnv = {},
	child_process = require('child_process');

//Duplicate the parent's environment object
for (someVar in env) {
    bossEnv[someVar] = env[someVar];
}

// Now, extend this with some new variables:
bossEnv['ZK_HOST'] = config.get('ZK_HOST');
bossEnv['ZK_PORT'] = config.get('ZK_PORT');

// send to boss, message format: {'workerid':id,'action':action,'data':{}}
boss = child_process.fork('./worker/zkClientWorker.js',
		{env:bossEnv}
);
/*boss = child_process.spawn("node", ["worker/taskBoss.js"],
		{env:bossEnv,stdio: ['ipc']}
);
boss.stdout.setEncoding('utf8');
boss.stdout.on('data', function(data) {
  console.log(data);
});*/
console.log("Zk Client Worker initial.");
boss.on('message', function(msg) {
  console.log('www Got message from Boss:', msg);
});

// HTTP Service start.
var app = require('../app');
var debug = require('debug')('DevOpSys:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.get("HTTP_PORT") || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
